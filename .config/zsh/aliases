#!/bin/bash

ZDIR="$HOME/.config/zsh/"
if [ -f "${ZDIR}/work_aliases" ];then
    source "${ZDIR}/work_aliases"
fi

deactivate () {
        unset -f pydoc > /dev/null 2>&1 || true
        if ! [ -z "${_OLD_VIRTUAL_PATH:+_}" ]
        then
                PATH="$_OLD_VIRTUAL_PATH"
                export PATH
                unset _OLD_VIRTUAL_PATH
        fi
        if ! [ -z "${_OLD_VIRTUAL_PYTHONHOME+_}" ]
        then
                PYTHONHOME="$_OLD_VIRTUAL_PYTHONHOME"
                export PYTHONHOME
                unset _OLD_VIRTUAL_PYTHONHOME
        fi
        hash -r 2> /dev/null
        if ! [ -z "${_OLD_VIRTUAL_PS1+_}" ]
        then
                PS1="$_OLD_VIRTUAL_PS1"
                export PS1
                unset _OLD_VIRTUAL_PS1
        fi
        unset VIRTUAL_ENV
        unset VIRTUAL_ENV_PROMPT
}

c() { 
    printf "%s\n" "$@" | bc -l;
}

h(){
    fuzz=$(cat ~/.config/zsh/zhistory | sort | uniq| fzf)
    if [ ! -z $fuzz ];then
        wl-copy $fuzz
    fi
}

tpaste(){
    if [ -z $1 ];then
        :
    else
        wl-paste --type=TEXT $1
    fi
}

proxyls(){
    docker container ls --format 'table {{.Names}}' | grep ipvanish
}

pysum(){
    python -c "print(sum([$(wl-paste)]))"
}

pysumf(){
    python -c "print(f'{sum([$(wl-paste)]):,}')"
}

ta(){
    fuzz=$(tmux ls | awk -F':' '{print $1}' | fzf)
    [ -z $fuzz ] && return 0
    tmux attach -t $fuzz
}

tn(){
    [ -z $1 ] && return 0
    tmux new -s $1
}

gch(){
    [ ! -z $1 ] && git checkout "$@" && return 0
    fuzz=$(git for-each-ref --sort -committerdate --format '%(refname:short)' | grep -v origin | fzf)
    [ -z $fuzz ] && return 0
    git checkout $fuzz
}

sqlf(){
    fuzz=$(fs -g '.sql$' | fzf --reverse --height 40%)
    [ -f "$fuzz" ] || return 0
    sqlformat -ask upper $fuzz -o $fuzz
    sed -i 's/;--/;\n--/g' $fuzz
    sed -i 's/;/;\n\n/g' $fuzz
}

wgc(){
    if [ "$1" = "d" ]; then
        profile=$(ip a | grep POINTOPOINT | cut -d':' -f2 | tr -d ' ')
        sudo wg-quick down $profile
        return 0
    fi
    profile=$(ls /etc/wireguard/ --color=never | fzf)
    if [ -n profile ];then
        sudo wg-quick up $( echo $profile | cut -d'.' -f1)
    fi
}

fr(){
    [[ -z $1 ]] && echo 'No find string provided' && return 1
    [[ -z $2 ]] && echo 'No replace string provided' && return 1
    if [[ -n $3 ]]; then
        sed -i "s/$1/$2/g" $3
    else
        rg "$1" "$(pwd)" | xargs sed -i "s/$1/$2/g" 
    fi
}

dbexport(){
    for i in $apps; do py manage.py dumpdata "$i" > "$i.json" && echo "exported $i";done
}

dbimport(){
    for i in $apps; do py manage.py loaddata "$i.json" && echo "imported $i";done
}
dexec(){
	fuzz=$(docker ps --format '{{.Names}}' | fzf --reverse --height 40%)
	[ ! -z $fuzz ] || return 0
        [ -z $1 ] &&
	docker exec -it $fuzz bash ||
	docker exec -it $fuzz "$@"
}

dlogs(){
	fuzz=$(docker ps --format '{{.Names}}' | fzf --reverse --height 40%)
	[ ! -z $fuzz ] || return 0
	docker logs $fuzz -f
}

function cd {
    builtin cd "$@"
    pwd > ~/.zsh/lastdir
}

# restore last saved path
if [ -f ~/.zsh/lastdir ]
    then cd "$(cat ~/.zsh/lastdir)"
    else
        echo "$HOME" > ~/.zsh/lastdir
        cd $HOME
fi

swap(){
    mv "$1" "$1_" &&
    mv "$2" "$1" &&
    mv "$1_" "$2"
}

o(){
    fuzz=$(rg -j 4 --no-ignore --files ~/ ~/.ssh/ ~/.bin /media/videos  | fzf --reverse --height 40%)
    [ -f "$fuzz" ] && ([ -n "$1" ] && $1 "$fuzz" || mimeo "$fuzz") || return 0
}

cfg(){
    fuzz=$(fs -p ~/dotfiles/ -p ~/dotfiles/.config/ -p ~/.bin/ -i 'BraveSoftware,Slack'| fzf --reverse --height 40%)
    [ -f "$fuzz" ] && ([ -n "$1" ] && $1 "$fuzz" || vim "$fuzz") || return 0
}


j(){
    fuzz=$(fd -t d . $HOME $HOME/Music/ $HOME/Videos | fzf --reverse --height 40%)
    if [ -z $fuzz ]
    then 
        return 0
    elif [ -d $fuzz ]
    then
        cd "$fuzz" && clear
    fi
}

mkpw(){
  lenth=8
  [ ! -z $1 ] && lenth=$1
  PW=$(tr -dc 'A-Za-z0-9!$%&*+,-./=?@^_~' </dev/urandom | head -c $lenth)
  echo $PW
}

secret(){
    echo "$(tr -dc 'A-Za-z0-9!$%&()*./<>_~' </dev/urandom | head -c 50)"
}

py(){
    $VIRTUAL_ENV/bin/python "$@"
}

bp(){
    "$VIRTUAL_ENV/bin/ipython" "$@"
}

remind(){
    while getopts d:t:n: flag
    do
    case "${flag}" in
        d) d=${OPTARG}
            delay=$d;;
        t) t=${OPTARG}
            hour=$(date --date="$t" "+%H")
            current_hour=$(date "+%H")
            current_time=$(date "+%s")
            ((hour < current_hour)) && 
                delay=$(($(date --date="$t 1 day" "+%s") - $current_time)) ||
                delay=$(($(date --date="$t" "+%s") - $current_time));;
        n) note=${OPTARG};;
        *) echo 'unknown flag' && return 1
    esac 
    done
    (sleep $delay && notify-send "$note" &&
        mpv --force-window=no /usr/share/sounds/freedesktop/stereo/service-login.oga) &> /dev/null & disown
}

ytd(){
    a=
    r=
    while getopts r:a flag
    do
    case "${flag}" in
        r) r=${OPTARG}
            [ "$r" -eq "$r" ] &> /dev/null && continue || echo 'Resolution not an integer' && return 1 ;;
        a)
        link="${@:${OPTIND}}"
        [ $link = '-a' ] && echo 'no link provided' && return 1 
        yt-dlp --audio-format mp3 -x ${@:(( OPTIND+1 ))} && return 0  ;;
        ?) echo "unknown flag -${OPTARG}" && return 1
    esac 
    done
    link="${@:${OPTIND}}"
    [ -z $r ] && r=1080
    [ -z $link ] && echo 'no link provided' && return 1
    yt-dlp -f "bestvideo[height<="$r"]+bestaudio" $link
}

unepoch(){
    date -d @$1 "+%F %H:%M:%S"
}

localip(){
    ip a | grep -E '192.168|10.0' | cut -d ' ' -f6 | cut -d '/' -f1
}

ignore() {
    curl -sLw "\n" "https://www.toptal.com/developers/gitignore/api/$@" | grep -v 'http' > .gitignore
    echo ".gitignore\n.vscode\n.env" >> .gitignore;
}

godoc(){
    go doc $1 | bat --language=go
}

alias cronhelp=" echo '
# ┌───────────── minute (0 - 59)
# │ ┌───────────── hour (0 - 23)
# │ │ ┌───────────── day of the month (1 - 31)
# │ │ │ ┌───────────── month (1 - 12)
# │ │ │ │ ┌───────────── day of the week (0 - 6) (Sunday to Saturday;
# │ │ │ │ │                                   7 is also Sunday on some systems)
# │ │ │ │ │
# │ │ │ │ │
# * * * * * <command to execute>
'"

alias vim="nvim"
alias fzf="fzf --layout=reverse --height=40%"
alias zz="vim ~/.zprofile"
alias vi="vim"
alias df="df -h"                          # human-readable size
alias free="free -m"                      # show sizes in MB
alias more=less
alias update="paru -Syu"
alias get="paru -S"  
alias search="paru -Fs"
alias kick="paru -Rns"
alias mv="mv -v"
alias wget="wget -U Mozilla/5.0 -c"
alias s="speedtest --no-up"
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias grep='grep --color=auto'
alias reload="exec ${SHELL} -l; clear"
alias al="vim ~/.config/zsh/aliases && clear && reload"
alias wal="vim ~/.config/zsh/work_aliases && clear && reload"
alias dd='dd status=progress'
alias rsync="rsync -ah --progress"
alias feh="feh -d --edit -. -B black ."
alias gst="git status"
alias gconflict="git diff --name-only --diff-filter=U"
alias start="sudo systemctl start"
alias stop="sudo systemctl stop"
alias restart="sudo systemctl restart"
alias sysenable="sudo systemctl enable"
alias pyserv="python -m http.server"
alias crontab="export VISUAL=nvim; crontab"
alias myip="curl -s 'https://api.myip.com' | jq"
# alias migrate="/usr/bin/env python manage.py migrate"
alias gomigrate="$HOME/go/bin/migrate"
alias mm="/usr/bin/env python manage.py makemigrations"
alias rs="export DEBUG=True;/usr/bin/env python manage.py runserver 127.0.0.1:8002"
alias status="sudo systemctl status"
alias ustatus="systemctl --user status"
alias enable="sudo systemctl enable"
alias uenable="systemctl --user enable"
alias ustop="systemctl --user stop"
alias urestart="systemctl --user restart"
alias mlock="multilockscreen"
alias ipy="ipython"
alias yay="paru"
alias ls="/usr/bin/eza"
alias ll="/usr/bin/eza -lga"
alias la="/usr/bin/eza -a"
alias dshell="py manage.py shell"
alias dbshell="py manage.py dbshell"
alias mpn="mpv --no-resume-playback"
alias cp="cp -r"
alias rr="exec ${SHELL} -l; clear"
alias pc="[ -n $1 ] && ss -tulnp | grep $1"
alias postjson="curl -H 'Content-Type:application/json' -X POST -s"
alias patchjson="curl -H 'Content-Type:application/json' -X PATCH -s"
alias curljson="curl -H 'Content-Type:application/json' -X -s"
alias utc="date +'%Y-%m-%d %H:%M:%S' -d"
alias hserve="hugo serve --noHTTPCache --ignoreCache --disableFastRender --port=9000"
alias denv="less --plain ~/.api_data/local_env"
alias dc="docker compose"
alias dps="docker ps"
alias dcu="docker compose up -d"
alias dcd="docker compose down"
alias dports="docker ps --format \"table {{.Names}}\t{{.Ports}}\""
alias vdc="vim docker-compose.yml"
alias dtoken="grep -i 'ACCESS' ~/.api_data/local_env | cut -d'=' -f2 | clip.exe"
alias gr="go run ."
alias hyprgrep="hyprctl clients -j | grep -v 'grep' | grep $1 -B 12 -A 11"
alias vcfg="cd ~/.config/nvim/ && vim ."
alias du="du -h"
alias nv="neovide"
alias nrs="npm run serve"
alias rsn="npm run serve"
alias rns="npm run serve"
alias wrandr='wlr-randr'
alias reflect="sudo reflector --latest 20 --sort rate --save /etc/pacman.d/mirrorlist"
alias suspend="sudo systemctl suspend"
alias nvc="nvim --cmd \"cd ~/.config/nvim\" ~/.config/nvim"
alias jbat="wl-paste | jq | bat --language=json"
alias stress="s-tui"
alias qb="qutebrowser"
alias lg="lazygit"
alias bw="flatpak run --command=bw com.bitwarden.desktop"
